kableExtra::kable_classic(full_width = F, html_font = "Cambria")
dim(data_table)
colnames(data_table)[1] <- "ensembl_id"
colnames(data_table)
samples <- data.frame(lapply(colnames(data_table)[2:11],
FUN=function(x){unlist(strsplit(x,
split = "\\_"))[c(1,2)]}))
colnames(samples) <- colnames(data_table)[2:11]
rownames(samples) <- c("Case", "Seq")
samples <- data.frame(t(samples))
citation("GEOmetadb")
citation("BiocManager")
citation("edgeR")
citation("GEOquery")
citation("DBI")
citation("RSQLite")
citation("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
" gse.submission_date,",
" gse.supplementary_file",
"FROM",
"  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
"  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
"WHERE",
"  gse.submission_date > '2013-01-01' AND",
"  gse.title LIKE '%Metabolic Syndrome%' AND",
"  gpl.organism LIKE '%Homo sapiens%' AND",
"  gpl.technology LIKE '%high-throughput sequencing%' ",
"  ORDER BY gse.submission_date DESC",sep=" ")
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
gse <- getGEO("GSE166474",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "pipe")
names(GSMList(gse))
show(getGEO("GSE166474",GSEMatrix=TRUE))
data.frame(getGEO("GSE166474",GSEMatrix=TRUE)[[1]])[,c(8)]
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$geo_accession
current_gpl_info$title
current_gpl_info$submission_date
current_gpl_info$last_update_date
current_gpl_info$organism
current_gpl_info$technology
length(current_gpl_info$series_id)
length(current_gpl_info$sample_id)
supp_files = getGEOSuppFiles('GSE166474')
file_names = rownames(supp_files)
print(file_names)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
" gse.submission_date,",
" gse.supplementary_file",
"FROM",
"  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
"  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
"WHERE",
"  gse.submission_date > '2013-01-01' AND",
"  gse.title LIKE '%Metabolic Syndrome%' AND",
"  gpl.organism LIKE '%Homo sapiens%' AND",
"  gpl.technology LIKE '%high-throughput sequencing%' ",
"  ORDER BY gse.submission_date DESC",sep=" ")
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
gse <- getGEO("GSE166474",GSEMatrix=FALSE)
gse <- getGEO("GSE166474",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "pipe")
names(GSMList(gse))
show(getGEO("GSE166474",GSEMatrix=TRUE))
data.frame(getGEO("GSE166474",GSEMatrix=TRUE)[[1]])[,c(8)]
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$geo_accession
current_gpl_info$title
current_gpl_info$submission_date
current_gpl_info$last_update_date
current_gpl_info$organism
current_gpl_info$technology
current_gpl_info$technology
length(current_gpl_info$series_id)
length(current_gpl_info$sample_id)
supp_files = getGEOSuppFiles('GSE166474')
file_names = rownames(supp_files)
print(file_names)
genes_expression = read.delim(file_names[1],header=TRUE,
check.names = FALSE)
genes_expression[1:10, 1:4] %>%
kableExtra::kbl(caption = "Genes Expression in 3 samples") %>%
kableExtra::kable_classic(full_width = F, html_font = "Cambria")
dim(genes_expression)
colnames(genes_expression)[1] <- "ensembl_id"
colnames(genes_expression)
dataSamples <- data.frame(lapply(colnames(genes_expression)[2:11],
FUN=function(x){unlist(strsplit(x,
split = ""))[c(1)]}))
colnames(dataSamples) <- colnames(genes_expression)[2:11]
rownames(dataSamples) <- c("Status")
dataSamples <- data.frame(t(dataSamples))
dataSamples <- data.frame(lapply(colnames(genes_expression)[2:11],
FUN=function(x){unlist(strsplit(x,
split = ""))[c(1)]}))
colnames(dataSamples) <- colnames(genes_expression)[2:11]
rownames(dataSamples) <- c("Status")
dataSamples <- data.frame(t(dataSamples))
validGenes <- genes_expression[grep("ENSG", genes_expression$ensembl_id),]
summary(duplicated(validGenes$ensembl_id))
cpms = cpm(validGenes[, 2:11])
rownames(cpms) <- validGenes[,1]
keep = rowSums(cpms > 1) >=5
genes_filtered = validGenes[keep,]
filtered_results <- data.frame(genes_expression = nrow(genes_expression), validGenes = nrow(validGenes), genes_filtered = nrow(genes_filtered))
rownames(filtered_results)[1] <- "Number of Genes"
filtered_results %>%
kableExtra::kbl(caption = "Genes count") %>%
kableExtra::kable_classic(full_width = F, html_font = "Cambria")
data2plot <- log2(cpm(genes_filtered[,2:11]))
colnames(data2plot) <- lapply(colnames(genes_filtered)[2:11],
FUN=function(x) {unlist(strsplit(x,
split="\\_"))[c(1)]})
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "Data distribution - Boxplot")
abline(h = median(apply(data2plot, 2, median)),
col = "red", lwd = 1.2, lty = "dashed")
counts_density <- apply(log2(cpm(genes_filtered[,2:11])),
2, density)
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="Data distribution - Density Plot", cex.lab = 0.85)
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue", text.col = "black",
merge = TRUE, bg = "gray90")
plotMA(log2(genes_filtered[,c(2:6,7:11)]), ylab="M - ratio log expression",
main="MetS vs Control")
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
d = calcNormFactors(d)
normalized_counts <- cpm(d)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
" gse.submission_date,",
" gse.supplementary_file",
"FROM",
"  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
"  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
"WHERE",
"  gse.submission_date > '2013-01-01' AND",
"  gse.title LIKE '%Metabolic Syndrome%' AND",
"  gpl.organism LIKE '%Homo sapiens%' AND",
"  gpl.technology LIKE '%high-throughput sequencing%' ",
"  ORDER BY gse.submission_date DESC",sep=" ")
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
gse <- getGEO("GSE166474",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "pipe")
names(GSMList(gse))
show(getGEO("GSE166474",GSEMatrix=TRUE))
data.frame(getGEO("GSE166474",GSEMatrix=TRUE)[[1]])[,c(8)]
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$geo_accession
current_gpl_info$title
current_gpl_info$submission_date
current_gpl_info$last_update_date
current_gpl_info$organism
current_gpl_info$technology
length(current_gpl_info$series_id)
length(current_gpl_info$sample_id)
supp_files = getGEOSuppFiles('GSE166474')
file_names = rownames(supp_files)
print(file_names)
genes_expression = read.delim(file_names[1],header=TRUE,
check.names = FALSE)
genes_expression[1:10, 1:4] %>%
kableExtra::kbl(caption = "Genes Expression in 3 samples") %>%
kableExtra::kable_classic(full_width = F, html_font = "Cambria")
dim(genes_expression)
colnames(genes_expression)[1] <- "ensembl_id"
colnames(genes_expression)
dataSamples <- data.frame(lapply(colnames(genes_expression)[2:11],
FUN=function(x){unlist(strsplit(x,
split = ""))[c(1)]}))
colnames(dataSamples) <- colnames(genes_expression)[2:11]
rownames(dataSamples) <- c("Status")
dataSamples <- data.frame(t(dataSamples))
validGenes <- genes_expression[grep("ENSG", genes_expression$ensembl_id),]
summary(duplicated(validGenes$ensembl_id))
cpms = cpm(validGenes[, 2:11])
rownames(cpms) <- validGenes[,1]
keep = rowSums(cpms > 1) >=5
genes_filtered = validGenes[keep,]
filtered_results <- data.frame(genes_expression = nrow(genes_expression), validGenes = nrow(validGenes), genes_filtered = nrow(genes_filtered))
rownames(filtered_results)[1] <- "Number of Genes"
filtered_results %>%
kableExtra::kbl(caption = "Genes count") %>%
kableExtra::kable_classic(full_width = F, html_font = "Cambria")
data2plot <- log2(cpm(genes_filtered[,2:11]))
colnames(data2plot) <- lapply(colnames(genes_filtered)[2:11],
FUN=function(x) {unlist(strsplit(x,
split="\\_"))[c(1)]})
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "Data distribution - Boxplot")
abline(h = median(apply(data2plot, 2, median)),
col = "red", lwd = 1.2, lty = "dashed")
counts_density <- apply(log2(cpm(genes_filtered[,2:11])),
2, density)
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="Data distribution - Density Plot", cex.lab = 0.85)
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue", text.col = "black",
merge = TRUE, bg = "gray90")
plotMA(log2(genes_filtered[,c(2:6,7:11)]), ylab="M - ratio log expression",
main="MetS vs Control")
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
knitr::opts_chunk$set(echo = TRUE)
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
plotMA(log2(genes_filtered[,c(2:6,7:11)]), ylab="M - ratio log expression",
main="MetS vs Control")
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
filtered_data_matrix <- as.matrix(genes_filtered[,2:11])
rownames(filtered_data_matrix) <- genes_filtered$ensembl_id
d = DGEList(counts=filtered_data_matrix, group=samples$Status)
d = calcNormFactors(d)
normalized_counts <- cpm(d)
plotMDS(d, labels=lapply(rownames(samples), FUN=function(x){unlist(strsplit(x,split = "\\_"))[c(1)]}), col = c("darkgreen","blue")[factor(samples$Status)])
model_design <- model.matrix(~samples$Status)
d <- estimateDisp(d, model_design)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
" gse.submission_date,",
" gse.supplementary_file",
"FROM",
"  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
"  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
"WHERE",
"  gse.submission_date > '2013-01-01' AND",
"  gse.title LIKE '%Metabolic Syndrome%' AND",
"  gpl.organism LIKE '%Homo sapiens%' AND",
"  gpl.technology LIKE '%high-throughput sequencing%' ",
"  ORDER BY gse.submission_date DESC",sep=" ")
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
if (!requireNamespace("rmarkdown", quietly = TRUE))
+     install.packages("rmarkdown")
if (!requireNamespace("knitr", quietly = TRUE))
+     install.packages("knitr")
if (!requireNamespace("pandoc", quietly = TRUE))
+     install.packages("pandoc")
if (!requireNamespace("devtools", quietly = TRUE))
+     install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
if (!requireNamespace("edgeR", quietly = TRUE))
BiocManager::install("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
BiocManager::install("biomaRt")
if (!requireNamespace("GEOmetadb", quietly = TRUE))
BiocManager::install("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
+     install.packages("GEOquery")
if (!requireNamespace("DBI", quietly = TRUE))
+     install.packages("DBI")
if (!requireNamespace("RSQLite", quietly = TRUE))
+     install.packages("RSQLite")
if(!requireNamespace("kableExtra", quietly=TRUE))
install.packages("kableExtra")
library(devtools)
library(rmarkdown)
library(knitr)
library(pandoc)
library(BiocManager)
library(GEOmetadb)
library(GEOquery)
library(DBI)
library(RSQLite)
library(edgeR)
library(biomaRt)
library(kableExtra)
sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
" gse.submission_date,",
" gse.supplementary_file",
"FROM",
"  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
"  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
"WHERE",
"  gse.submission_date > '2013-01-01' AND",
"  gse.title LIKE '%Metabolic Syndrome%' AND",
"  gpl.organism LIKE '%Homo sapiens%' AND",
"  gpl.technology LIKE '%high-throughput sequencing%' ",
"  ORDER BY gse.submission_date DESC",sep=" ")
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
